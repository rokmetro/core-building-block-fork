// Package Def provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package Def

import (
	"encoding/json"
	"fmt"

	"github.com/pkg/errors"
)

// Defines values for DeviceType.
const (
	DeviceTypeDesktop DeviceType = "desktop"

	DeviceTypeMobile DeviceType = "mobile"

	DeviceTypeOther DeviceType = "other"

	DeviceTypeWeb DeviceType = "web"
)

// Defines values for JWKAlg.
const (
	JWKAlgRS256 JWKAlg = "RS256"
)

// Defines values for JWKKty.
const (
	JWKKtyRSA JWKKty = "RSA"
)

// Defines values for JWKUse.
const (
	JWKUseSig JWKUse = "sig"
)

// Defines values for OrganizationType.
const (
	OrganizationTypeHuge OrganizationType = "huge"

	OrganizationTypeLarge OrganizationType = "large"

	OrganizationTypeMedium OrganizationType = "medium"

	OrganizationTypeMicro OrganizationType = "micro"

	OrganizationTypeSmall OrganizationType = "small"
)

// Defines values for ReqAuthLoginRequestAuthType.
const (
	ReqAuthLoginRequestAuthTypeEmail ReqAuthLoginRequestAuthType = "email"

	ReqAuthLoginRequestAuthTypeIllinoisOidc ReqAuthLoginRequestAuthType = "illinois_oidc"

	ReqAuthLoginRequestAuthTypePhone ReqAuthLoginRequestAuthType = "phone"

	ReqAuthLoginRequestAuthTypeUsername ReqAuthLoginRequestAuthType = "username"
)

// Defines values for ReqAuthLoginUrlRequestAuthType.
const (
	ReqAuthLoginUrlRequestAuthTypeIllinoisOidc ReqAuthLoginUrlRequestAuthType = "illinois_oidc"
)

// Defines values for ResAuthAuthorizeServiceResponseTokenType.
const (
	ResAuthAuthorizeServiceResponseTokenTypeBearer ResAuthAuthorizeServiceResponseTokenType = "Bearer"
)

// Defines values for ResAuthResponseRokwireTokenTokenType.
const (
	ResAuthResponseRokwireTokenTokenTypeBearer ResAuthResponseRokwireTokenTokenType = "Bearer"
)

// Account defines model for Account.
type Account struct {
	Application  *Application             `json:"application,omitempty"`
	AuthTypes    *[]AccountAuthType       `json:"auth_types,omitempty"`
	Devices      *[]Device                `json:"devices,omitempty"`
	Groups       *[]ApplicationGroup      `json:"groups,omitempty"`
	Id           string                   `json:"id"`
	Organization *Organization            `json:"organization,omitempty"`
	Permissions  *[]ApplicationPermission `json:"permissions,omitempty"`
	Profile      *Profile                 `json:"profile,omitempty"`
	Roles        *[]ApplicationRole       `json:"roles,omitempty"`
}

// AccountAuthType defines model for AccountAuthType.
type AccountAuthType struct {
	Account    *Account                `json:"account,omitempty"`
	Active     *bool                   `json:"active,omitempty"`
	Active2fa  *bool                   `json:"active_2fa,omitempty"`
	AuthType   *AuthType               `json:"auth_type,omitempty"`
	Credential *Credential             `json:"credential,omitempty"`
	Id         *string                 `json:"id,omitempty"`
	Identifier *string                 `json:"identifier,omitempty"`
	Params     *AccountAuthType_Params `json:"params,omitempty"`
}

// AccountAuthType_Params defines model for AccountAuthType.Params.
type AccountAuthType_Params struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Application defines model for Application.
type Application struct {
	Id               string                     `json:"id"`
	MultiTenant      *bool                      `json:"multi_tenant,omitempty"`
	Name             string                     `json:"name"`
	Organizations    *[]ApplicationOrganization `json:"organizations,omitempty"`
	RequiresOwnUsers *bool                      `json:"requires_own_users,omitempty"`
	Types            *[]ApplicationType         `json:"types,omitempty"`
}

// ApplicationGroup defines model for ApplicationGroup.
type ApplicationGroup struct {
	Application *Application             `json:"application,omitempty"`
	Id          string                   `json:"id"`
	Name        string                   `json:"name"`
	Permissions *[]ApplicationPermission `json:"permissions,omitempty"`
	Roles       *[]ApplicationRole       `json:"roles,omitempty"`
}

// ApplicationOrganization defines model for ApplicationOrganization.
type ApplicationOrganization struct {
	TODO *string `json:"TODO,omitempty"`
	Id   *string `json:"id,omitempty"`
}

// ApplicationPermission defines model for ApplicationPermission.
type ApplicationPermission struct {
	Application *Application `json:"application,omitempty"`
	Id          string       `json:"id"`
	Name        string       `json:"name"`
}

// ApplicationRole defines model for ApplicationRole.
type ApplicationRole struct {
	Application *Application             `json:"application,omitempty"`
	Id          string                   `json:"id"`
	Name        string                   `json:"name"`
	Permissions *[]ApplicationPermission `json:"permissions,omitempty"`
}

// ApplicationType defines model for ApplicationType.
type ApplicationType struct {
	Application *Application `json:"application,omitempty"`
	Id          string       `json:"id"`
	Identifier  string       `json:"identifier"`
	Name        *string      `json:"name,omitempty"`
	Versions    *[]string    `json:"versions,omitempty"`
}

// Service registration record used for auth
type AuthServiceReg struct {
	Host      string  `json:"host"`
	PubKey    *PubKey `json:"pub_key,omitempty"`
	ServiceId string  `json:"service_id"`
}

// AuthType defines model for AuthType.
type AuthType struct {
	Code        *string          `json:"code,omitempty"`
	Description *string          `json:"description,omitempty"`
	Id          *string          `json:"id,omitempty"`
	IsExternal  *bool            `json:"is_external,omitempty"`
	Params      *AuthType_Params `json:"params,omitempty"`
}

// AuthType_Params defines model for AuthType.Params.
type AuthType_Params struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Credential defines model for Credential.
type Credential struct {
	AccountsAuthTypes *[]AccountAuthType      `json:"accounts_auth_types,omitempty"`
	Id                *string                 `json:"id,omitempty"`
	Value             *map[string]interface{} `json:"value,omitempty"`
}

// Device defines model for Device.
type Device struct {
	Accounts   *[]Account `json:"accounts,omitempty"`
	Id         string     `json:"id"`
	MacAddress *string    `json:"mac_address,omitempty"`
	Os         *string    `json:"os,omitempty"`
	Type       DeviceType `json:"type"`
}

// DeviceType defines model for Device.Type.
type DeviceType string

// GlobalConfig defines model for GlobalConfig.
type GlobalConfig struct {
	Setting string `json:"setting"`
}

// JSON Web Key (JWK)
type JWK struct {

	// The "alg" (algorithm) parameter identifies the algorithm intended for use with the key
	Alg JWKAlg `json:"alg"`

	// The exponent of the key - Base64URL encoded
	E string `json:"e"`

	// The "kid" (key ID) parameter is used to match a specific key
	Kid string `json:"kid"`

	// The "kty" (key type) parameter identifies the cryptographic algorithm family used with the key
	Kty JWKKty `json:"kty"`

	// The modulus (2048 bit) of the key - Base64URL encoded.
	N string `json:"n"`

	// The "use" (public key use) parameter identifies the intended use of the public key
	Use JWKUse `json:"use"`
}

// The "alg" (algorithm) parameter identifies the algorithm intended for use with the key
type JWKAlg string

// The "kty" (key type) parameter identifies the cryptographic algorithm family used with the key
type JWKKty string

// The "use" (public key use) parameter identifies the intended use of the public key
type JWKUse string

// JSON Web Key Set (JWKS)
type JWKS struct {
	Keys []JWK `json:"keys"`
}

// OpenID Connect Discovery Metadata
type OidcDiscovery struct {
	Issuer  string `json:"issuer"`
	JwksUri string `json:"jwks_uri"`
}

// Organization defines model for Organization.
type Organization struct {
	Config *OrganizationConfig `json:"config,omitempty"`
	Id     string              `json:"id"`
	Name   string              `json:"name"`
	Type   OrganizationType    `json:"type"`
}

// OrganizationType defines model for Organization.Type.
type OrganizationType string

// OrganizationConfig defines model for OrganizationConfig.
type OrganizationConfig struct {

	// organization domains
	Domains *[]string `json:"domains,omitempty"`

	// organization config id
	Id *string `json:"id,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	Accounts *[]Account     `json:"accounts,omitempty"`
	Fields   *ProfileFields `json:"fields,omitempty"`
}

// ProfileFields defines model for ProfileFields.
type ProfileFields struct {
	FirstName *string `json:"first_name,omitempty"`
	Id        *string `json:"id,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	PhotoUrl  *string `json:"photo_url,omitempty"`
}

// PubKey defines model for PubKey.
type PubKey struct {
	Alg    string `json:"alg"`
	KeyPem string `json:"key_pem"`
}

// Full service registration record
type ServiceReg struct {
	Description string          `json:"description"`
	FirstParty  bool            `json:"first_party"`
	Host        string          `json:"host"`
	InfoUrl     *string         `json:"info_url,omitempty"`
	LogoUrl     *string         `json:"logo_url,omitempty"`
	Name        string          `json:"name"`
	PubKey      *PubKey         `json:"pub_key,omitempty"`
	Scopes      *[]ServiceScope `json:"scopes"`
	ServiceId   string          `json:"service_id"`
}

// ServiceScope defines model for ServiceScope.
type ServiceScope struct {

	// Explanation displayed to users for why this scope is requested/required
	Explanation *string `json:"explanation,omitempty"`
	Required    bool    `json:"required"`
	Scope       string  `json:"scope"`
}

// ReqAuthAuthorizeServiceRequest defines model for _req_AuthAuthorizeServiceRequest.
type ReqAuthAuthorizeServiceRequest struct {

	// Scopes to be granted to this service in this and future tokens. Replaces existing scopes if present.
	ApprovedScopes *[]string `json:"approved_scopes,omitempty"`
	ServiceId      string    `json:"service_id"`
}

// Auth login creds for auth_type="email"
type ReqAuthLoginCredsEmail struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Auth login creds for auth_type="oidc"
//   - full redirect URI received from OIDC provider
type ReqAuthLoginCredsOidc string

// Auth login creds for auth_type="phone"
type ReqAuthLoginCredsPhone struct {
	Code  *string `json:"code,omitempty"`
	Phone string  `json:"phone"`
}

// Auth login params for auth_type="email"
type ReqAuthLoginParamsEmail struct {
	NewUser *bool `json:"new_user,omitempty"`
}

// Auth login params for auth_type="oidc"
type ReqAuthLoginParamsOidc struct {
	PkceVerifier *string `json:"pkce_verifier,omitempty"`
	RedirectUri  *string `json:"redirect_uri,omitempty"`
}

// Auth login params for auth_type="phone" (None)
type ReqAuthLoginParamsPhone map[string]interface{}

// ReqAuthLoginRequest defines model for _req_AuthLoginRequest.
type ReqAuthLoginRequest struct {
	AppId    string                      `json:"app_id"`
	AuthType ReqAuthLoginRequestAuthType `json:"auth_type"`
	Creds    *interface{}                `json:"creds,omitempty"`
	OrgId    string                      `json:"org_id"`
	Params   *interface{}                `json:"params,omitempty"`
}

// ReqAuthLoginRequestAuthType defines model for ReqAuthLoginRequest.AuthType.
type ReqAuthLoginRequestAuthType string

// ReqAuthLoginUrlRequest defines model for _req_AuthLoginUrlRequest.
type ReqAuthLoginUrlRequest struct {
	AppId       string                         `json:"app_id"`
	AuthType    ReqAuthLoginUrlRequestAuthType `json:"auth_type"`
	OrgId       string                         `json:"org_id"`
	RedirectUri string                         `json:"redirect_uri"`
}

// ReqAuthLoginUrlRequestAuthType defines model for ReqAuthLoginUrlRequest.AuthType.
type ReqAuthLoginUrlRequestAuthType string

// ResAuthAuthorizeServiceResponse defines model for _res_AuthAuthorizeServiceResponse.
type ResAuthAuthorizeServiceResponse struct {
	AccessToken    *string   `json:"access_token,omitempty"`
	ApprovedScopes *[]string `json:"approved_scopes,omitempty"`

	// Full service registration record
	ServiceReg *ServiceReg `json:"service_reg,omitempty"`

	// The type of the provided tokens to be specified when they are sent in the "Authorization" header
	TokenType *ResAuthAuthorizeServiceResponseTokenType `json:"token_type,omitempty"`
}

// The type of the provided tokens to be specified when they are sent in the "Authorization" header
type ResAuthAuthorizeServiceResponseTokenType string

// ResAuthLoginResponse defines model for _res_AuthLoginResponse.
type ResAuthLoginResponse struct {
	Account *ResAuthResponseAccount      `json:"account,omitempty"`
	Params  *interface{}                 `json:"params"`
	Token   *ResAuthResponseRokwireToken `json:"token,omitempty"`
}

// ResAuthLoginUrlResponse defines model for _res_AuthLoginUrlResponse.
type ResAuthLoginUrlResponse struct {
	LoginUrl string `json:"login_url"`

	// Params to be submitted with 'login' request (if necessary)
	Params *map[string]interface{} `json:"params,omitempty"`
}

// ResAuthRefreshResponse defines model for _res_AuthRefreshResponse.
type ResAuthRefreshResponse struct {
	Params *interface{}                 `json:"params,omitempty"`
	Token  *ResAuthResponseRokwireToken `json:"token,omitempty"`
}

// ResAuthResponseAccount defines model for _res_AuthResponseAccount.
type ResAuthResponseAccount struct {
	AuthTypes   *[]ResAuthResponseAccountAuthType `json:"auth_types,omitempty"`
	Groups      *[]ResAuthResponseGroup           `json:"groups,omitempty"`
	Id          string                            `json:"id"`
	Permissions *[]ResAuthResponsePermission      `json:"permissions,omitempty"`
	Profile     *ProfileFields                    `json:"profile,omitempty"`
	Roles       *[]ResAuthResponseRole            `json:"roles,omitempty"`
}

// ResAuthResponseAccountAuthType defines model for _res_AuthResponseAccountAuthType.
type ResAuthResponseAccountAuthType struct {
	Id         *string                 `json:"id,omitempty"`
	Identifier *string                 `json:"identifier,omitempty"`
	Params     *map[string]interface{} `json:"params"`
}

// ResAuthResponseGroup defines model for _res_AuthResponseGroup.
type ResAuthResponseGroup struct {
	Id          string                       `json:"id"`
	Name        string                       `json:"name"`
	Permissions *[]ResAuthResponsePermission `json:"permissions,omitempty"`
	Roles       *[]ResAuthResponseRole       `json:"roles,omitempty"`
}

// ResAuthResponseParamsOidc defines model for _res_AuthResponseParamsOidc.
type ResAuthResponseParamsOidc struct {
	OidcToken *struct {
		AccessToken *string `json:"access_token,omitempty"`
		IdToken     *string `json:"id_token,omitempty"`
		TokenType   *string `json:"token_type,omitempty"`
	} `json:"oidc_token,omitempty"`
}

// ResAuthResponsePermission defines model for _res_AuthResponsePermission.
type ResAuthResponsePermission struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// ResAuthResponseRokwireToken defines model for _res_AuthResponseRokwireToken.
type ResAuthResponseRokwireToken struct {

	// The user's access token to be provided to authorize access to ROKWIRE APIs
	AccessToken *string `json:"access_token,omitempty"`

	// A refresh token that can be used to get a new access token once the one provided expires
	RefreshToken *string `json:"refresh_token,omitempty"`

	// The type of the provided tokens to be specified when they are sent in the "Authorization" header
	TokenType *ResAuthResponseRokwireTokenTokenType `json:"token_type,omitempty"`
}

// The type of the provided tokens to be specified when they are sent in the "Authorization" header
type ResAuthResponseRokwireTokenTokenType string

// ResAuthResponseRole defines model for _res_AuthResponseRole.
type ResAuthResponseRole struct {
	Id          string                       `json:"id"`
	Name        string                       `json:"name"`
	Permissions *[]ResAuthResponsePermission `json:"permissions,omitempty"`
}

// PostAdminApplicationsJSONBody defines parameters for PostAdminApplications.
type PostAdminApplicationsJSONBody Application

// PostAdminGlobalConfigJSONBody defines parameters for PostAdminGlobalConfig.
type PostAdminGlobalConfigJSONBody GlobalConfig

// PutAdminGlobalConfigJSONBody defines parameters for PutAdminGlobalConfig.
type PutAdminGlobalConfigJSONBody GlobalConfig

// PostAdminOrganizationsJSONBody defines parameters for PostAdminOrganizations.
type PostAdminOrganizationsJSONBody Organization

// PutAdminOrganizationsIdJSONBody defines parameters for PutAdminOrganizationsId.
type PutAdminOrganizationsIdJSONBody Organization

// DeleteAdminServiceRegsParams defines parameters for DeleteAdminServiceRegs.
type DeleteAdminServiceRegsParams struct {

	// The service ID of the registration to delete
	Id string `json:"id"`
}

// GetAdminServiceRegsParams defines parameters for GetAdminServiceRegs.
type GetAdminServiceRegsParams struct {

	// A comma-separated list of service IDs to return registrations for
	Ids string `json:"ids"`
}

// PostAdminServiceRegsJSONBody defines parameters for PostAdminServiceRegs.
type PostAdminServiceRegsJSONBody ServiceReg

// PutAdminServiceRegsJSONBody defines parameters for PutAdminServiceRegs.
type PutAdminServiceRegsJSONBody ServiceReg

// GetBbsServiceRegsParams defines parameters for GetBbsServiceRegs.
type GetBbsServiceRegsParams struct {

	// A comma-separated list of service IDs to return registrations for
	Ids string `json:"ids"`
}

// PostServicesAuthAuthorizeServiceJSONBody defines parameters for PostServicesAuthAuthorizeService.
type PostServicesAuthAuthorizeServiceJSONBody ReqAuthAuthorizeServiceRequest

// PostServicesAuthLoginJSONBody defines parameters for PostServicesAuthLogin.
type PostServicesAuthLoginJSONBody ReqAuthLoginRequest

// PostServicesAuthLoginUrlJSONBody defines parameters for PostServicesAuthLoginUrl.
type PostServicesAuthLoginUrlJSONBody ReqAuthLoginUrlRequest

// GetServicesAuthServiceRegsParams defines parameters for GetServicesAuthServiceRegs.
type GetServicesAuthServiceRegsParams struct {

	// A comma-separated list of service IDs to return registrations for
	Ids string `json:"ids"`
}

// GetTpsServiceRegsParams defines parameters for GetTpsServiceRegs.
type GetTpsServiceRegsParams struct {

	// A comma-separated list of service IDs to return registrations for
	Ids string `json:"ids"`
}

// PostAdminApplicationsJSONRequestBody defines body for PostAdminApplications for application/json ContentType.
type PostAdminApplicationsJSONRequestBody PostAdminApplicationsJSONBody

// PostAdminGlobalConfigJSONRequestBody defines body for PostAdminGlobalConfig for application/json ContentType.
type PostAdminGlobalConfigJSONRequestBody PostAdminGlobalConfigJSONBody

// PutAdminGlobalConfigJSONRequestBody defines body for PutAdminGlobalConfig for application/json ContentType.
type PutAdminGlobalConfigJSONRequestBody PutAdminGlobalConfigJSONBody

// PostAdminOrganizationsJSONRequestBody defines body for PostAdminOrganizations for application/json ContentType.
type PostAdminOrganizationsJSONRequestBody PostAdminOrganizationsJSONBody

// PutAdminOrganizationsIdJSONRequestBody defines body for PutAdminOrganizationsId for application/json ContentType.
type PutAdminOrganizationsIdJSONRequestBody PutAdminOrganizationsIdJSONBody

// PostAdminServiceRegsJSONRequestBody defines body for PostAdminServiceRegs for application/json ContentType.
type PostAdminServiceRegsJSONRequestBody PostAdminServiceRegsJSONBody

// PutAdminServiceRegsJSONRequestBody defines body for PutAdminServiceRegs for application/json ContentType.
type PutAdminServiceRegsJSONRequestBody PutAdminServiceRegsJSONBody

// PostServicesAuthAuthorizeServiceJSONRequestBody defines body for PostServicesAuthAuthorizeService for application/json ContentType.
type PostServicesAuthAuthorizeServiceJSONRequestBody PostServicesAuthAuthorizeServiceJSONBody

// PostServicesAuthLoginJSONRequestBody defines body for PostServicesAuthLogin for application/json ContentType.
type PostServicesAuthLoginJSONRequestBody PostServicesAuthLoginJSONBody

// PostServicesAuthLoginUrlJSONRequestBody defines body for PostServicesAuthLoginUrl for application/json ContentType.
type PostServicesAuthLoginUrlJSONRequestBody PostServicesAuthLoginUrlJSONBody

// Getter for additional properties for AccountAuthType_Params. Returns the specified
// element and whether it was found
func (a AccountAuthType_Params) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccountAuthType_Params
func (a *AccountAuthType_Params) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccountAuthType_Params to handle AdditionalProperties
func (a *AccountAuthType_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccountAuthType_Params to handle AdditionalProperties
func (a AccountAuthType_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AuthType_Params. Returns the specified
// element and whether it was found
func (a AuthType_Params) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AuthType_Params
func (a *AuthType_Params) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AuthType_Params to handle AdditionalProperties
func (a *AuthType_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AuthType_Params to handle AdditionalProperties
func (a AuthType_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
