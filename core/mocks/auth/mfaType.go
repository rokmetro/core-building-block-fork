// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "core-building-block/core/model"

	mock "github.com/stretchr/testify/mock"

	storage "core-building-block/driven/storage"

	time "time"
)

// mfaType is an autogenerated mock type for the mfaType type
type mfaType struct {
	mock.Mock
}

// enroll provides a mock function with given fields: identifier
func (_m *mfaType) enroll(identifier string) (*model.MFAType, error) {
	ret := _m.Called(identifier)

	var r0 *model.MFAType
	if rf, ok := ret.Get(0).(func(string) *model.MFAType); ok {
		r0 = rf(identifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MFAType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// sendCode provides a mock function with given fields: identifier
func (_m *mfaType) sendCode(identifier string) (string, *time.Time, error) {
	ret := _m.Called(identifier)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(identifier)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *time.Time
	if rf, ok := ret.Get(1).(func(string) *time.Time); ok {
		r1 = rf(identifier)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*time.Time)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(identifier)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// verify provides a mock function with given fields: context, mfa, accountID, code
func (_m *mfaType) verify(context storage.TransactionContext, mfa *model.MFAType, accountID string, code string) (*string, error) {
	ret := _m.Called(context, mfa, accountID, code)

	var r0 *string
	if rf, ok := ret.Get(0).(func(storage.TransactionContext, *model.MFAType, string, string) *string); ok {
		r0 = rf(context, mfa, accountID, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(storage.TransactionContext, *model.MFAType, string, string) error); ok {
		r1 = rf(context, mfa, accountID, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
