// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "core-building-block/core/model"

	mock "github.com/stretchr/testify/mock"
)

// Administration is an autogenerated mock type for the Administration type
type Administration struct {
	mock.Mock
}

// AdmCreateAppOrgGroup provides a mock function with given fields: name, ID, permissionID, rolesID
func (_m *Administration) AdmCreateAppOrgGroup(name string, ID string, permissionID []string, rolesID []string) (*model.AppOrgGroup, error) {
	ret := _m.Called(name, ID, permissionID, rolesID)

	var r0 *model.AppOrgGroup
	if rf, ok := ret.Get(0).(func(string, string, []string, []string) *model.AppOrgGroup); ok {
		r0 = rf(name, ID, permissionID, rolesID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string, []string) error); ok {
		r1 = rf(name, ID, permissionID, rolesID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdmCreateAppOrgRole provides a mock function with given fields: name, addID, description, permissionID
func (_m *Administration) AdmCreateAppOrgRole(name string, addID string, description string, permissionID []string) (*model.AppOrgRole, error) {
	ret := _m.Called(name, addID, description, permissionID)

	var r0 *model.AppOrgRole
	if rf, ok := ret.Get(0).(func(string, string, string, []string) *model.AppOrgRole); ok {
		r0 = rf(name, addID, description, permissionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppOrgRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []string) error); ok {
		r1 = rf(name, addID, description, permissionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdmDeleteAppOrgGroup provides a mock function with given fields: ID
func (_m *Administration) AdmDeleteAppOrgGroup(ID string) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdmGetApplicationOrgGroups provides a mock function with given fields:
func (_m *Administration) AdmGetApplicationOrgGroups() ([]model.AppOrgGroup, error) {
	ret := _m.Called()

	var r0 []model.AppOrgGroup
	if rf, ok := ret.Get(0).(func() []model.AppOrgGroup); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdmGetApplicationOrgRoles provides a mock function with given fields:
func (_m *Administration) AdmGetApplicationOrgRoles() ([]model.AppOrgRole, error) {
	ret := _m.Called()

	var r0 []model.AppOrgRole
	if rf, ok := ret.Get(0).(func() []model.AppOrgRole); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AppOrgRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdmGetTest provides a mock function with given fields:
func (_m *Administration) AdmGetTest() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AdmGetTestModel provides a mock function with given fields:
func (_m *Administration) AdmGetTestModel() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
