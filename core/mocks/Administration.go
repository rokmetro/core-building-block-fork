// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "core-building-block/core/model"

	mock "github.com/stretchr/testify/mock"
)

// Administration is an autogenerated mock type for the Administration type
type Administration struct {
	mock.Mock
}

// AdmGetAccount provides a mock function with given fields: accountID
func (_m *Administration) AdmGetAccount(accountID string) (*model.Account, error) {
	ret := _m.Called(accountID)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(string) *model.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdmGetAccounts provides a mock function with given fields: accountID, identifier, appID, orgID
func (_m *Administration) AdmGetAccounts(accountID string, identifier string, appID *string, orgID *string) ([]model.Account, error) {
	ret := _m.Called(accountID, identifier, appID, orgID)

	var r0 []model.Account
	if rf, ok := ret.Get(0).(func(string, string, *string, *string) []model.Account); ok {
		r0 = rf(accountID, identifier, appID, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *string, *string) error); ok {
		r1 = rf(accountID, identifier, appID, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdmGetTest provides a mock function with given fields:
func (_m *Administration) AdmGetTest() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// AdmGetTestModel provides a mock function with given fields:
func (_m *Administration) AdmGetTestModel() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
